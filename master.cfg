# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("eva00", "eva00"),
               BuildSlave("eva01", "eva01")]

slaves_env= {'havana': ['eva00'],
             'folsom': ['eva01'],}

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

class Env:
    ST = 'st'
    IT = 'it'
    RC = 'rc'

class Trigger:
    IMMEDIATE = 'immediate'
    NIGHTLY = 'nightly'
    RELEASE = 'release'

class ProjectType:
    NETEASE = 'ntes'
    OPENSTACK = 'os'
    NEUTRON = 'neutron'


target_projects = {
    'havana':{
        'nova':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana',
                'debian_branch':'debian/havana',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'nova',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'nova',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-rc',
                'src_folder':'nova',
                'upstream_version':'2013.2',
            },
        ],
        'neutron':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana',
                'debian_branch':'debian/havana',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'neutron',
                'upstream_version':'2013.2.2',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'neutron',
                'upstream_version':'2013.2.2',
            },
        ],
        'glance':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana',
                'debian_branch':'debian/havana',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'glance',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'glance',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-rc',
                'src_folder':'glance',
                'upstream_version':'2013.2',
            },
        ],
        'keystone':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana',
                'debian_branch':'debian/havana',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'keystone',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'keystone',
                'upstream_version':'2013.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-rc',
                'src_folder':'keystone',
                'upstream_version':'2013.2',
            },
        ],
        'umbrella':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'netease/havana',
                'debian_branch':'debian/havana',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'umbrella',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'umbrella',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'netease/havana-stable',
                'debian_branch':'debian/havana-stable',
                'debian_repo':'wheezy-havana-rc',
                'src_folder':'umbrella',
            },
        ],
        'monitor':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-havana-nightly',
                'src_folder':'nvs_monitor',
            },
            {
                'env':Env.IT,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'stable',
                'debian_branch':'debian/netease-stable',
                'debian_repo':'wheezy-havana-testing',
                'src_folder':'nvs_monitor',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'stable',
                'debian_branch':'debian/netease-stable',
                'debian_repo':'wheezy-havana-rc',
                'src_folder':'nvs_monitor',
            },
        ],
    },
    'folsom':{
        'nova':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'nova',
                'upstream_version':'2012.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom-stable',
                'debian_branch':'debian/folsom-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'nova',
                'upstream_version':'2012.2',
            },
        ],
        'glance':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'glance',
                'upstream_version':'2012.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom-stable',
                'debian_branch':'debian/folsom-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'glance',
                'upstream_version':'2012.2',
            },
        ],
        'keystone':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'keystone',
                'upstream_version':'2012.2',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom-stable',
                'debian_branch':'debian/folsom-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'keystone',
                'upstream_version':'2012.2',
            },
        ],
        'billing':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'billing',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'stable',
                'debian_branch':'debian/netease-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'billing',
            },
        ],
        'sentry':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'sentry',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'stable',
                'debian_branch':'debian/netease-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'sentry',
            }
        ],
        'umbrella':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'restruct',
                'debian_branch':'debian/restruct',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'umbrella',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'restruct',
                'debian_branch':'debian/restruct',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'umbrella',
            }
        ],
        'python-novaclient':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'novaclient',
                'epoch':'2',
                'upstream_version':'2.10.0',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'novaclient',
                'epoch':'2',
                'upstream_version':'2.10.0',
            }
        ],
        'python-glanceclient':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'glanceclient',
                'epoch':'1',
                'upstream_version':'0.6.0',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/folsom',
                'debian_branch':'debian/folsom',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'glanceclient',
                'epoch':'1',
                'upstream_version':'0.6.0',
            }
        ],
        'python-keystoneclient':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'keystoneclient',
                'epoch':'1',
                'upstream_version':'0.2.5',
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.OPENSTACK,
                'code_branch':'netease/master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'keystoneclient',
                'epoch':'1',
                'upstream_version':'0.2.5',
            }
        ],
        'python-nosclient':[
            {
                'env':Env.ST,
                'trigger':Trigger.NIGHTLY,
                'project_type':ProjectType.NETEASE,
                'code_branch':'master',
                'debian_branch':'debian/netease',
                'debian_repo':'wheezy-folsom-nightly',
                'src_folder':'nosclient'
            },
            {
                'env':Env.RC,
                'trigger':Trigger.RELEASE,
                'project_type':ProjectType.NETEASE,
                'code_branch':'stable',
                'debian_branch':'debian/netease-stable',
                'debian_repo':'wheezy-folsom-rc',
                'src_folder':'nosclient'
            }
        ],
    }
}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/nova.git',
        workdir='nova',
        project='nova',
        branches=['netease/folsom', 'netease/folsom-stable',
                  'netease/havana', 'netease/havana-stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/neutron.git',
        workdir='neutron',
        project='neutron',
        branches=['netease/havana', 'netease/havana-stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/glance.git',
        workdir='glance',
        project='glance',
        branches=['netease/folsom', 'netease/folsom-stable',
                  'netease/havana', 'netease/havana-stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/keystone.git',
        workdir='keystone',
        project='keystone',
        branches=['netease/folsom', 'netease/folsom-stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/billing.git',
        workdir='billing',
        project='billing',
        branches=['master', 'stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/sentry.git',
        workdir='sentry',
        project='sentry',
        branches=['master', 'stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/umbrella.git',
        workdir='umbrella',
        project='umbrella',
        branches=['netease/havana', 'netease/havana-stable',
                  'netease/havana-neutron', 'restruct'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/monitor.git',
        workdir='monitor',
        project='monitor',
        branches=['master', 'stable'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/python-novaclient.git',
        workdir='python-novaclient',
        project='python-novaclient',
        branches=['netease/folsom'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/python-glanceclient.git',
        workdir='python-glanceclient',
        project='python-glanceclient',
        branches=['netease/folsom'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/python-keystoneclient.git',
        workdir='python-keystoneclient',
        project='python-keystoneclient',
        branches=['netease/master'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/python-nosclient.git',
        workdir='python-nosclient',
        project='python-nosclient',
        branches=['master', 'stable'],
        pollinterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

import re

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.scheduler import Try_Userpass
from buildbot.changes import filter


c['schedulers'] = []


def is_nt_version_changed(change):
    for f in change.files:
        match = re.match(".+\/nt_version.py$", f)

        if match:
            return True

    return False


def add_scheduler(c, project, branch, codename, env):
    import random

    m = random.randint(0, 59)
    if env == Env.ST or env == Env.IT:
        c['schedulers'].append(Nightly(
                                    name=project+'-'+codename+'-nightly-'+env,
                                    branch=branch,
                                    builderNames=[
                                        'build-'+project+'-'+codename+'-'+env],
                                    change_filter=filter.ChangeFilter(
                                        project=project,
                                        branch=branch),
                                    hour=2,
                                    minute=m,
                                    onlyIfChanged=True))
        c['schedulers'].append(ForceScheduler(
                                    name=project+'-'+codename+'-force-'+env,
                                    builderNames=[
                                        'build-'+project+'-'+codename+'-'+env]))
    elif env == Env.RC:
        c['schedulers'].append(SingleBranchScheduler(
                                    name=project+'-'+codename+'-version-'+env,
                                    change_filter=filter.ChangeFilter(
                                        project=project,
                                        branch=branch),
                                    fileIsImportant=is_nt_version_changed,
                                    treeStableTimer=120,
                                    builderNames=[
                                        'build-'+project+'-'+codename+'-'+env]))
        c['schedulers'].append(ForceScheduler(
                                    name=project+'-'+codename+'-force-'+env,
                                    builderNames=[
                                        'build-'+project+'-'+codename+'-'+env]))
    else:
        pass


# add schedulers
for n, t in target_projects.iteritems():
    for k, v in t.iteritems():
        for e in v:
            add_scheduler(c, k, e['code_branch'], n, e['env'])


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand


# init build factories
for n, t in target_projects.iteritems():
    for k, v in t.iteritems():
        for e in v:
            locals()[k+'_'+n+'_'+e['env']+'_factory'] = BuildFactory()


def add_build_step(factory, project, env, code_branch, debian_branch, version, trigger, codename, debian_repo):
    factory.addStep(ShellCommand(command=["rm", "-rf", project], workdir="build"))
    factory.addStep(ShellCommand(command=["rm", "-rf", "build-area"], workdir="build"))
    factory.addStep(Git(repourl='ssh://SCM/openstack/'+project+'.git', mode='full', method='clobber', workdir='build/'+project))

    factory.addStep(ShellCommand(command=["git", "checkout", "-b",
                                          code_branch+"-"+trigger,
                                          "origin/"+code_branch], workdir="build/"+project))
    factory.addStep(ShellCommand(command=["git", "checkout", "-b",
                                          "debian/"+trigger+"-build",
                                          "origin/"+debian_branch], workdir="build/"+project))
    factory.addStep(ShellCommand(command=["git", "merge",
                                          code_branch+"-"+trigger,
                                          "--no-edit", "--stat"], workdir="build/"+project))
    factory.addStep(ShellCommand(command=["git", "dch",
                                          "--debian-branch", "debian/"+trigger+"-build",
                                          "--git-author",
                                          "--new-version", version], workdir="build/"+project))
    factory.addStep(ShellCommand(command=["sed", "-i",
                                          "s/UNRELEASED/"+debian_repo+"/",
                                          "debian/changelog"], workdir="build/"+project))
    factory.addStep(ShellCommand(command=["git", "commit", "-a", "-m", "auto build"], workdir="build/"+project))

    factory.addStep(ShellCommand(command=["git-pbuilder", "update"], workdir='build/'+project, env={"DIST":"wheezy", "ARCH":"amd64"}))
    factory.addStep(ShellCommand(command=["git-buildpackage",
                                          "--git-dist=wheezy", "--git-arch=amd64",
                                          "--git-pbuilder",
                                          "--git-pbuilder-options=--allow-untrusted",
                                          "--git-cleaner=/bin/true",
                                          "--git-debian-branch=debian/"+trigger+"-build",
                                          "--git-upstream-branch="+code_branch+"-"+trigger,
                                          "--git-upstream-tree=branch", "-nc"], workdir='build/'+project))

    factory.addStep(ShellCommand(command=["/bin/sh", "-c", "tar cJf "+project+"-"+codename+"-"+env+".tar.xz *"], workdir='build/build-area'))
    factory.addStep(FileUpload(slavesrc=project+"-"+codename+"-"+env+".tar.xz",
                               masterdest="~/workspace/buildbot/temp/"+project+"-"+codename+"-"+env+".new.tar.xz", mode=0644,
                               workdir="build/build-area"))

    factory.addStep(MasterShellCommand(command="""
set -e
dname="%(project)s-%(codename)s-%(env)s.$(date +%%Y%%m%%dT%%H%%M)"
mkdir -p /home/debian/archives/%(env)s/%(project)s
cd /home/debian/archives/%(env)s/%(project)s
mv ~/workspace/buildbot/temp/%(project)s-%(codename)s-%(env)s.new.tar.xz $dname.tar.xz
mkdir -p $dname
tar xJf $dname.tar.xz -C $dname
cd $dname
reprepro -b /home/debian/reprepro --ignore=wrongdistribution --ignore=missingfile include %(debian_repo)s %(project)s_*.changes
""" % locals()))


nightly_version = '`date +%Y%m%dT%H%M`.git`git rev-parse --short HEAD^2`.nightly'
release_version = '`find . -type f -name nt_version.py -exec sed -r "s/.*\'(.*)\'.*/\\1/" {} \+`'
n_immediate_version = 'git describe|sed -r "s/(.*)\-(.*)\-(.*)/\\1+netease.\\2.\\3.nightly/"'
n_nightly_version = nightly_version

for n, t in target_projects.iteritems():
    for k, v in t.iteritems():
        for e in v:
            # if neutron project, override version
            if e['project_type'] == ProjectType.NEUTRON:
                if e['trigger'] == Trigger.immediate:
                    version = n_immediate_version
                elif e['trigger'] == Trigger.NIGHTLY:
                    version = n_nightly_version
                #TODO: neutron release autobuild
            else:
                if e['trigger'] == Trigger.NIGHTLY:
                    version = nightly_version
                elif e['trigger'] == Trigger.RELEASE:
                    version = release_version

                if e['project_type'] == ProjectType.OPENSTACK:
                    version = 'netease.' + version

                upstream_version = e.get('upstream_version')
                if upstream_version:
                    version = upstream_version + '+' + version

            if e['env'] == Env.ST:
                version = version + '.' + Env.ST
            elif e['env'] == Env.IT:
                version = version + '.' + Env.IT

            epoch = e.get('epoch')
            if epoch:
                version = epoch + ':' + version

            version = version + '-1'

            add_build_step(factory = locals()[k+'_'+n+'_'+e['env']+'_factory'],
                           project = k,
                           env = e['env'],
                           code_branch = e['code_branch'],
                           debian_branch = e['debian_branch'],
                           version = version,
                           trigger = e['trigger'],
                           codename = n,
                           debian_repo = e['debian_repo'])


from buildbot.config import BuilderConfig

c['builders'] = []
for n, t in target_projects.iteritems():
    for k, v in t.iteritems():
        for e in v:
            c['builders'].append(
                BuilderConfig(name='build-'+k+'-'+n+'-'+e['env'],
                    slavenames=slaves_env[n],
                    factory=locals()[k+'_'+n+'_'+e['env']+'_factory']))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","nimda")]),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8088, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the

c['title'] = "NetEase Openstack"
c['titleURL'] = "http://scm.service.163.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://115.236.124.8:8088/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### MAIL NOTIFIER
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("BUILD STATUS: %s" % result.title())
    #text.append("Buildslave for this build: %s" % build.getSlavename())
    text.append("Build reason: %s" % build.getReason())
    if master_status.getURLForThing(build):
        text.append("Complete logs for build steps: %s" %
                        master_status.getURLForThing(build))
    text.append("\n--")
    text.append("NetEase Openstack Automatic Build")
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

mn = MailNotifier(fromaddr="buildbot_os@163.com",
                  sendToInterestedUsers=False,
                  #mode="all",
                  mode="problem",
                  #subject="buildbot %(result)s on %(builder)s",
                  subject="%(result)s on %(builder)s",
                  extraRecipients=["nvs@hz.netease.com",
                                   "hzzhanggy@corp.netease.com"],
                  relayhost="smtp.163.com", smtpPort=25, useTls=False,
                  smtpUser="buildbot_os@163.com", smtpPassword="qwerty",
                  messageFormatter=messageFormatter,
                  extraHeaders={"Return-Path": "stan.zgy@gmail.com"})

c['status'].append(mn)

