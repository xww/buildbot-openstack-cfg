# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("eva00", "eva00")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/nova.git',
        workdir='nova',
        project='nova',
        branch='netease/folsom',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/glance.git',
        workdir='glance',
        project='glance',
        branch='netease/folsom',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/keystone.git',
        workdir='keystone',
        project='keystone',
        branch='netease/folsom',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/billing.git',
        workdir='billing',
        project='billing',
        branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/postman.git',
        workdir='postman',
        project='postman',
        branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/sentry.git',
        workdir='sentry',
        project='sentry',
        branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'ssh://SCM/openstack/umbrella.git',
        workdir='umbrella',
        project='umbrella',
        branch='master',
        pollinterval=300))





####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.scheduler import Try_Userpass
from buildbot.changes import filter

c['schedulers'] = []
#c['schedulers'].append(SingleBranchScheduler(
#                            name="all",
#                            change_filter=filter.ChangeFilter(branch='netease/folsom'),
#                            treeStableTimer=None,
#                            builderNames=["build-nova"]))
#c['schedulers'].append(Try_Userpass(
#                            name='nova-try',
#                            change_filter=filter.ChangeFilter(
#                                project='nova',
#                                branch='netease/folsom'),
#                            builderNames=['build-nova'],
#                            port=5555,
#                            userpass=[('nova', 'nova')]))

def add_scheduler(c, project, branch):
    c['schedulers'].append(Nightly(
                                name=project+'-nightly',
                                branch=branch,
                                builderNames=['build-'+project],
                                change_filter=filter.ChangeFilter(
                                    project=project,
                                    branch=branch),
                                hour=2,
                                minute=34,
                                onlyIfChanged=True))
    c['schedulers'].append(ForceScheduler(
                                name=project+'-force',
                                builderNames=['build-'+project]))


# add schedulers
add_scheduler(c, 'nova', 'netease/folsom')
add_scheduler(c, 'glance', 'netease/folsom')
add_scheduler(c, 'keystone', 'netease/folsom')
add_scheduler(c, 'billing', 'master')
add_scheduler(c, 'postman', 'master')
add_scheduler(c, 'sentry', 'master')
add_scheduler(c, 'umbrella', 'master')


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand

nova_factory = BuildFactory()
glance_factory= BuildFactory()
keystone_factory = BuildFactory()

billing_factory= BuildFactory()
postman_factory = BuildFactory()
sentry_factory = BuildFactory()
umbrella_factory = BuildFactory()

def add_build_step(factory, project, branch, debian_branch, version):
    factory.addStep(ShellCommand(command=["rm", "-rf", project], workdir='build'))
    factory.addStep(Git(repourl='ssh://SCM/openstack/'+project+'.git', mode='full', method='clobber', workdir='build/'+project))

    factory.addStep(ShellCommand(command=["git", "checkout", "-b", branch+"-nightly", "origin/"+branch], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git", "checkout", "-b", "debian/nightly-build", "origin/"+debian_branch], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git", "merge", branch+"-nightly", "--no-edit", "--stat"], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git", "dch", "--debian-branch", "debian/nightly-build", "--git-log", "--author stanzgy",
                                          "--new-version", version], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["sed", "-e", "s/UNRELEASED/wheezy-nightly/", "debian/changelog"], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git", "commit", "-a", "-m", "nightly build"], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git-pbuilder", "update"], workdir='build/'+project, env={"DIST":"wheezy", "ARCH":"amd64"}))
    factory.addStep(ShellCommand(command=["rm", "-rf", "../build-area"], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["git-buildpackage", "--git-dist=wheezy", "--git-arch=amd64", "--git-pbuilder",
                                          "--git-pbuilder-options=--allow-untrusted", "--git-cleaner=/bin/true", "--git-debian-branch=debian/nightly-build",
                                          "--git-upstream-branch="+branch+"-nightly", "--git-upstream-tree=branch", "-nc"], workdir='build/'+project))
    factory.addStep(ShellCommand(command=["tar", "cJf", project+"-nightly.tar.xz", "."], workdir='build/build-area'))
    factory.addStep(FileUpload(slavesrc=project+"-nightly.tar.xz", masterdest="~/workspace/buildbot/temp/"+project+"-nightly.new.tar.xz", mode=0644,
                               workdir="build/build-area"))
    factory.addStep(MasterShellCommand(command="""
set -e
dname="%(project)s-nightly.$(date +%%Y%%m%%dT%%H%%M)"
mkdir -p /home/debian/nightly/archives/%(project)s
cd /home/debian/nightly/archives/%(project)s
cp ~/workspace/buildbot/temp/%(project)s-nightly.new.tar.xz $dname.tar.xz
mkdir -p $dname
tar xJf $dname.tar.xz -C $dname
cd $dname
reprepro -b /home/debian/nightly/reprepro removesrc wheezy-nightly %(project)s
reprepro -b /home/debian/nightly/reprepro --ignore=wrongdistribution include wheezy-nightly %(project)s_*.changes
""" % locals()))
    #factory.addStep(MasterShellCommand(command="""
    #cd /home/debian/nightly/archives
    #ls -lt|tail -n +2|head -n 2|awk '{if($9 ~ /.*\.tar\.xz/) system("chmod +r " $9); else if($1 ~ /^d/) {system("chmod -R +r " $9);system("chmod +x " $9)}}'
    #"""))

os_version = "2012.2+netease.`date +%Y%m%d`.git`git rev-parse --short HEAD`-1"
add_build_step(nova_factory, 'nova', 'netease/folsom', 'debian/folsom', os_version)
add_build_step(glance_factory, 'glance', 'netease/folsom', 'debian/folsom', os_version)
add_build_step(keystone_factory, 'keystone', 'netease/folsom', 'debian/folsom', os_version)

ntes_version = "`date +%Y%m%d`.git`git rev-parse --short HEAD`-1"
add_build_step(billing_factory, 'billing', 'master', 'debian/netease', ntes_version)
add_build_step(postman_factory, 'postman', 'master', 'debian/netease', ntes_version)
add_build_step(sentry_factory, 'sentry', 'master', 'debian/netease', ntes_version)
add_build_step(umbrella_factory, 'umbrella', 'master', 'debian/netease', ntes_version)


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build-nova",
      slavenames=["eva00"],
      factory=nova_factory))
c['builders'].append(
    BuilderConfig(name="build-glance",
      slavenames=["eva00"],
      factory=glance_factory))
c['builders'].append(
    BuilderConfig(name="build-keystone",
      slavenames=["eva00"],
      factory=keystone_factory))
c['builders'].append(
    BuilderConfig(name="build-billing",
      slavenames=["eva00"],
      factory=billing_factory))
c['builders'].append(
    BuilderConfig(name="build-postman",
      slavenames=["eva00"],
      factory=postman_factory))
c['builders'].append(
    BuilderConfig(name="build-sentry",
      slavenames=["eva00"],
      factory=sentry_factory))
c['builders'].append(
    BuilderConfig(name="build-umbrella",
      slavenames=["eva00"],
      factory=umbrella_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","nimda")]),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8088, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","nimda")]),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8088, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NetEase Openstack"
c['titleURL'] = "https://scm.hz.netease.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://114.113.199.8:8088/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

