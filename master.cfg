# -*- python -*-
# ex: set syntax=python:

import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("alice", "alice")]

slaves_env = {'havana': ['alice']}

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


# build options
BUILDBOT_WEB_ADDR = '115.236.124.8'
BUILDBOT_WEB_PORT = 8088

BUILDBOT_TITLE = 'NetEase Openstack'
BUILDBOT_TITLE_URL = "http://scm.service.163.org"

BUILDER_PREFIX = 'build'
BUILDER_SRC_BRANCH = 'src'
BUILDER_DEBIAN_BRANCH = 'debian/autobuild'
BUILDER_EXPORT_DIR = 'build-area'

REPREPRO_DIR = '/home/debian/reprepro'
ARCHIVE_DIR = '/home/debian/archive'
ARCHIVE_MODE = 0644

DEFAULT_DIST = 'wheezy'
DEFAULT_ARCH = 'amd64'
PBUILDER_OPTIONS = "--allow-untrusted"
CLEANER = "/bin/true"

MAIL_ADDR = 'buildbot_os@163.com'
MAIL_USER = 'buildbot_os@163.com'
MAIL_SMTP_SERVER = 'smtp.163.com'
MAIL_SMTP_PORT = 25
MAIL_USE_TLS = False
MAIL_RECIPIENTS = ["nvs@hz.netease.com", "hzzhanggy@corp.netease.com"]


immediate_version = r'git describe | sed -r "s/(.*)-(.*)-(.*)/\1+netease.\2.\3/"'
nightly_version = r'git describe | sed -r "s/(.*)-(.*)-(.*)/\1+netease.\2.\3.nightly/"'
release_version = r'git describe --tags --abbrev=0'


# build settings
class Env:
    ST = 'st'
    IT = 'it'
    RC = 'rc'


class Trigger:
    IMMEDIATE = 'immediate'
    NIGHTLY = 'nightly'
    RELEASE = 'release'


class ProjectType:
    NETEASE = 'ntes'
    OPENSTACK = 'os'


target_projects = {
    'havana': {
        # Openstack projects
        'nova': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/nova.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'nova',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/nova.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'nova',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/nova.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'nova',
            },
        ],
        'neutron': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/neutron.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'neutron',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/neutron.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'neutron',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/neutron.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'neutron',
            },
        ],
        'glance': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/glance.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'glance',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/glance.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'glance',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/glance.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'glance',
            },
        ],
        'keystone': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/keystone.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'keystone',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/keystone.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'keystone',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/keystone.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'keystone',
            },
        ],
        'python-neutronclient': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/python-neutronclient.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'python-neutronclient',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/python-neutronclient.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'python-neutronclient',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.OPENSTACK,
                'repo_url': 'ssh://SCM/openstack/python-neutronclient.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'python-neutronclient',
            },
        ],

        # NetEase projects
        'monitor': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/monitor.git',
                'code_branch': 'master',
                'debian_branch': 'debian/netease',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'nvs_monitor',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/monitor.git',
                'code_branch': 'stable',
                'debian_branch': 'debian/netease-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'nvs_monitor',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/monitor.git',
                'code_branch': 'stable',
                'debian_branch': 'debian/netease-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'nvs_monitor',
            },
        ],
        'umbrella': [
            {
                'env': Env.ST,
                'trigger': Trigger.IMMEDIATE,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/umbrella.git',
                'code_branch': 'netease/havana',
                'debian_branch': 'debian/havana',
                'debian_repo': 'wheezy-havana-nightly',
                'src_folder': 'umbrella',
            },
            {
                'env': Env.IT,
                'trigger': Trigger.NIGHTLY,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/umbrella.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-testing',
                'src_folder': 'umbrella',
            },
            {
                'env': Env.RC,
                'trigger': Trigger.RELEASE,
                'project_type': ProjectType.NETEASE,
                'repo_url': 'ssh://SCM/openstack/umbrella.git',
                'code_branch': 'netease/havana-stable',
                'debian_branch': 'debian/havana-stable',
                'debian_repo': 'wheezy-havana-rc',
                'src_folder': 'umbrella',
            },
        ],
    },
}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []

# Openstack projects
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/nova.git',
    workdir='nova',
    project='nova',
    branches=['netease/havana', 'netease/havana-stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/neutron.git',
    workdir='neutron',
    project='neutron',
    branches=['netease/havana', 'netease/havana-stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/glance.git',
    workdir='glance',
    project='glance',
    branches=['netease/havana', 'netease/havana-stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/keystone.git',
    workdir='keystone',
    project='keystone',
    branches=['netease/havana', 'netease/havana-stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/python-novaclient.git',
    workdir='python-novaclient',
    project='python-novaclient',
    branches=['netease/master'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/python-glanceclient.git',
    workdir='python-glanceclient',
    project='python-glanceclient',
    branches=['netease/master'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/python-keystoneclient.git',
    workdir='python-keystoneclient',
    project='python-keystoneclient',
    branches=['netease/master'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/python-neutronclient.git',
    workdir='python-neutronclient',
    project='python-neutronclient',
    branches=['netease/master'],
    pollinterval=300))

# NetEase projects
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/billing.git',
    workdir='billing',
    project='billing',
    branches=['master', 'stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/sentry.git',
    workdir='sentry',
    project='sentry',
    branches=['master', 'stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/umbrella.git',
    workdir='umbrella',
    project='umbrella',
    branches=['netease/havana', 'netease/havana-stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/monitor.git',
    workdir='monitor',
    project='monitor',
    branches=['master', 'stable'],
    pollinterval=300))
c['change_source'].append(GitPoller(
    'ssh://SCM/openstack/python-nosclient.git',
    workdir='python-nosclient',
    project='python-nosclient',
    branches=['master', 'stable'],
    pollinterval=300))


####### SCHEDULERS

import re

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.scheduler import Try_Userpass
from buildbot.changes import filter


c['schedulers'] = []


def add_scheduler(c, project, branch, codename, env):
    import random

    m = random.randint(0, 59)
    if env == Env.ST:
        c['schedulers'].append(SingleBranchScheduler(
            name='-'.join([project, codename, env]),
            change_filter=filter.ChangeFilter(
                project=project,
                branch=branch),
            builderNames=[
                '-'.join([BUILDER_PREFIX, project,
                          codename, env])],
            treeStableTimer=120))
        c['schedulers'].append(ForceScheduler(
            name='-'.join([project, codename,
                           'force', env]),
            builderNames=[
                '-'.join([BUILDER_PREFIX, project,
                          codename, env])]))
    elif env == Env.IT:
        c['schedulers'].append(Nightly(
            name='-'.join([project, codename, env]),
            branch=branch,
            change_filter=filter.ChangeFilter(
                project=project,
                branch=branch),
            builderNames=[
                '-'.join([BUILDER_PREFIX, project,
                          codename, env])],
            hour=2,
            minute=m,
            onlyIfChanged=True))
        c['schedulers'].append(ForceScheduler(
            name='-'.join([project, codename,
                           'force', env]),
            builderNames=[
                '-'.join([BUILDER_PREFIX, project,
                          codename, env])]))
    elif env == Env.RC:
        c['schedulers'].append(ForceScheduler(
            name='-'.join([project, codename,
                           'force', env]),
            builderNames=[
                '-'.join([BUILDER_PREFIX, project,
                          codename, env])]))
    else:
        raise Exception("undefined environment")


# add schedulers
for codename, targets in target_projects.iteritems():
    for project, builds in targets.iteritems():
        for build in builds:
            add_scheduler(c, project, build['code_branch'],
                          codename, build['env'])


####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand


# init build factories
for codename, targets in target_projects.iteritems():
    for project, builds in targets.iteritems():
        for build in builds:
            locals()['_'.join([project, codename,
                               build['env'], 'factory'])] = BuildFactory()


# define build steps
def add_build_step(factory, build_kwargs):
    # init build args
    project = build_kwargs['project']
    codename = build_kwargs['codename']
    repo_url = build_kwargs['repo_url']
    env = build_kwargs['env']
    trigger = build_kwargs['trigger']
    code_branch = build_kwargs['code_branch']
    debian_branch = build_kwargs['debian_branch']
    debian_repo = build_kwargs['debian_repo']
    upstream_version = build_kwargs['upstream_version']
    debian_version = build_kwargs['debian_version']
    epoch = build_kwargs['epoch']
    dist = build_kwargs['dist']
    arch = build_kwargs['arch']

    # new package version used when doing git-dch
    dch_version = '$(git describe --tags HEAD^2)-%s' % debian_version
    if epoch:
        dch_version = epoch + ':' + dch_version

    # clone git repo
    factory.addStep(Git(repourl=repo_url,
                        mode='full', method='clobber',
                        workdir='build/%s' % project,
                        progress=True,
                        retryFetch=True,
                        haltOnFailure=True))

    # make sure code branch and debian branch are correct
    factory.addStep(ShellCommand(
        command=['git', 'checkout', 'origin/%s' % debian_branch],
        warnOnWarnings=True,
        haltOnFailure=True,
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['git', 'checkout', 'origin/%s' % code_branch],
        warnOnWarnings=True,
        haltOnFailure=True,
        workdir='build/%s' % project))

    # prepare auto build  debian branch
    factory.addStep(ShellCommand(
        command=('git checkout -b %(src_branch)s $(%(version)s) || '
                 'git checkout -b %(src_branch)s origin/%(code_branch)s && '
                 'git tag $(%(version)s)' %
                    {'src_branch': BUILDER_SRC_BRANCH,
                     'version': upstream_version,
                     'code_branch': code_branch}),
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['git', 'checkout', '-b',
                 BUILDER_DEBIAN_BRANCH, 'origin/%s' % debian_branch],
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['git', 'merge',
                 BUILDER_SRC_BRANCH,
                 '--no-edit', '--stat'],
        warnOnWarnings=True,
        haltOnFailure=True,
        workdir='build/%s' % project))

    # generate changelog
    factory.addStep(ShellCommand(
        command=['git', 'dch',
                 '--debian-branch', BUILDER_DEBIAN_BRANCH,
                 '--git-author',
                 '--new-version', dch_version],
        workdir='build/%s' % project,
        warnOnWarnings=True,
        haltOnFailure=True))
    factory.addStep(ShellCommand(
        command=['sed', '-i',
                 's/UNRELEASED/'+debian_repo+'/',
                 'debian/changelog'],
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['git', 'commit', '-a', '-m', 'buildbot auto build'],
        workdir='build/%s' % project))

    # build the package
    factory.addStep(ShellCommand(
        command=['git-pbuilder', 'update'],
        env={'DIST': dist, 'ARCH': arch},
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['git-buildpackage',
                 '--git-dist=%s' % dist,
                 '--git-arch=%s' % arch,
                 '--git-pbuilder',
                 '--git-pbuilder-options=%s' % PBUILDER_OPTIONS,
                 '--git-cleaner=%s' % CLEANER,
                 '--git-upstream-branch=%s' % BUILDER_SRC_BRANCH,
                 '--git-debian-branch=%s' % BUILDER_DEBIAN_BRANCH,
                 '--git-upstream-tree=branch',
                 '--git-export-dir=../%s' % BUILDER_EXPORT_DIR,
                 '-nc'],
        workdir='build/%s' % project,
        haltOnFailure=True,
        warnOnWarnings=True))

    # upload packages
    factory.addStep(ShellCommand(
        command=['git', 'checkout',
                 BUILDER_SRC_BRANCH],
        workdir='build/%s' % project))
    factory.addStep(ShellCommand(
        command=['rm', '-rf', '*.obsolete.*'],
        workdir='build/%s' % BUILDER_EXPORT_DIR))

    # package archive file name
    version = ('$(git --git-dir ../%(project)s/.git '
               '--work-tree ../%(project)s describe --tags)' %
               {'project': project})

    # upload archive to master
    factory.addStep(ShellCommand(
        command=['/bin/sh', '-c',
                 ('tar cJf %(project)s.tar.xz *%(version)s*' %
                     {'project': project,
                      'version': version})],
        workdir='build/%s' % BUILDER_EXPORT_DIR,
        haltOnFailure=True,
        warnOnWarnings=True))
    factory.addStep(FileUpload(
        slavesrc= '%s.tar.xz' % project,
        masterdest=(ARCHIVE_DIR +
                    ('/%(env)s/%(project)s/%(project)s.%(trigger)s.tar.xz' %
                        {'env': env,
                         'project': project,
                         'trigger': trigger})),
        mode=ARCHIVE_MODE,
        workdir='build/%s' % BUILDER_EXPORT_DIR))

    # add package to deb source
    factory.addStep(MasterShellCommand(command=("""
cd %(archive_dir)s/%(env)s/%(project)s
tar xJf *.%(trigger)s.tar.xz
reprepro -b %(reprepro_dir)s --ignore=wrongdistribution --ignore=missingfile include %(debian_repo)s $(ls -ltc *.changes|head -n1|awk '{print $9}')
rm -rf *.tar.xz
""" % {'project': project,
       'env': env,
       'trigger': trigger,
       'reprepro_dir': REPREPRO_DIR,
       'archive_dir': ARCHIVE_DIR,
       'debian_repo': debian_repo})))

    factory.addStep(ShellCommand(
        command=['rm', '-f', '%s.tar.xz' % project],
        workdir='build/%s' % BUILDER_EXPORT_DIR))


# add builder factory buildsteps
for codename, targets in target_projects.iteritems():
    for project, builds in targets.iteritems():
        for build in builds:
            build_kwargs = {
                'project': project,
                'codename': codename,
                'repo_url': build['repo_url'],
                'env': build['env'],
                'trigger': build['trigger'],
                'code_branch': build['code_branch'],
                'debian_branch': build['debian_branch'],
                'debian_repo': build['debian_repo']
            }

            if build['trigger'] == Trigger.IMMEDIATE:
                upstream_version = immediate_version
            elif build['trigger'] == Trigger.NIGHTLY:
                upstream_version = nightly_version
            elif build['trigger'] == Trigger.RELEASE:
                upstream_version = release_version
            else:
                raise Exception("undefined trigger")

            epoch = build.get('epoch')
            if epoch:
                epoch = epoch

            debian_version = build.get('debian_version')
            if debian_version:
                debian_version = debian_version
            else:
                debian_version = '1'

            build_kwargs['upstream_version'] = upstream_version
            build_kwargs['debian_version'] = debian_version
            build_kwargs['epoch'] = epoch

            dist = build.get('dist')
            if dist:
                build_kwargs['dist'] = dist
            else:
                build_kwargs['dist'] = DEFAULT_DIST

            arch = build.get('arch')
            if arch:
                build_kwargs['arch'] = arch
            else:
                build_kwargs['arch'] = DEFAULT_ARCH

            add_build_step(factory = locals()['_'.join(
                                                [project, codename,
                                                 build['env'], 'factory'])],
                           build_kwargs = build_kwargs)



# init builder configs
from buildbot.config import BuilderConfig

c['builders'] = []
for codename, targets in target_projects.iteritems():
    for project, builds in targets.iteritems():
        for build in builds:
            c['builders'].append(
                BuilderConfig(
                    name='-'.join([BUILDER_PREFIX, project,
                                   codename, build['env']]),
                    slavenames=slaves_env[codename],
                    factory=locals()['_'.join([project, codename,
                                               build['env'], 'factory'])]))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin", os.environ['BUILDBOT_ADMIN_PASSWD'])]),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=BUILDBOT_WEB_PORT,
                                  authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the

c['title'] = BUILDBOT_TITLE
c['titleURL'] = BUILDBOT_TITLE_URL

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ("http://%(server)s:%(port)d/" %
                        {'server': BUILDBOT_WEB_ADDR,
                         'port': BUILDBOT_WEB_PORT})

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}

####### MAIL NOTIFIER
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("BUILD STATUS: %s" % result.title())
    #text.append("Buildslave for this build: %s" % build.getSlavename())
    text.append("Build reason: %s" % build.getReason())
    if master_status.getURLForThing(build):
        text.append("Complete logs for build steps: %s" %
                        master_status.getURLForThing(build))
    text.append("\n--")
    text.append("Debian NetEase Openstack packages auto-build")
    return {
        'body': "\n".join(text),
        'type': 'plain'
    }

mn = MailNotifier(fromaddr=MAIL_ADDR,
                  sendToInterestedUsers=False,
                  #mode="all",
                  mode="problem",
                  #subject="buildbot %(result)s on %(builder)s",
                  subject="%(result)s on %(builder)s",
                  extraRecipients=MAIL_RECIPIENTS,
                  relayhost=MAIL_SMTP_SERVER,
                  smtpPort=MAIL_SMTP_PORT,
                  useTls=MAIL_USE_TLS,
                  smtpUser=MAIL_USER,
                  smtpPassword=os.environ['BUILDBOT_MAIL_PASSWD'],
                  messageFormatter=messageFormatter,
                  extraHeaders={"Return-Path": "stan.zgy@gmail.com"})

c['status'].append(mn)

